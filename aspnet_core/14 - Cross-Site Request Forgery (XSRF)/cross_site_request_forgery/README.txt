
Cross-Site Request Forgery (XSRF or CSRF) is a type of attack that occurs when a malicious actor tricks 
a user into performing actions on a web application where they are authenticated. This can lead to 
unintended actions being performed on the user's behalf without their consent. CSRF attacks leverage 
the fact that the user's browser automatically includes credentials (like cookies or HTTP authentication 
headers) with requests to a website where they are authenticated.

How CSRF Works

1. User Authentication: The user logs into a trusted web application and receives an authentication token, 
					 such as a cookie.

2. Malicious Request: The user visits a malicious website that contains hidden or visible requests to the 
				   trusted web application.

3. Unintentional Actions: The user's browser, being authenticated, automatically includes the authentication 
					   token in the request to the trusted web application, causing it to perform actions 
					   as if they were performed by the user.

Preventing CSRF in ASP.NET Core

ASP.NET Core provides built-in mechanisms to protect against CSRF attacks. These mechanisms include the 
use of anti-forgery tokens, which ensure that the requests made to the server are from legitimate 
sources.

ANTI-FORGERY TOKENS -

The Primary method to prevent CSRF attacks in ASP.Net Core is by using anti-forgery tokens. These tokens
are generated by the server and included in HTML forms and AJAX requests. The server then validates
these tokens to ensure that the requests are legitmate.

Steps to Implement Anti-Forgery Tokens

1. Include Anti-Forgery Tokens in Forms: Use the `@Html.AntiForgeryToken()` helper in Razor views to 
										 include the token in forms.

2. Validate Anti-Forgery Tokens: Use the `[ValidateAntiForgeryToken]` attribute an action methods to
								 validate the token.

3. Automatic Validation in Razor Pages: In Razor Pages, the anti-forgery token validation is enabled
										by default for POST requests.

4. AJAX Requests: Include the anti-forgery token in AJAX requests.
		
		- Add a hidden input with the anti-forgery token in your HTML.
		- Include the token in your AJAX headers.